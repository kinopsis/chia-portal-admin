/**
 * An√°lisis de Estrategias para Sincronizaci√≥n Completa
 * Eval√∫a opciones t√©cnicas para sincronizar 830 servicios (722 OPAs + 108 tr√°mites)
 * resolviendo conflictos de c√≥digos duplicados
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

interface SyncStrategy {
  name: string
  description: string
  pros: string[]
  cons: string[]
  implementation: string
  uiChangesRequired: boolean
  riskLevel: 'low' | 'medium' | 'high'
  recommendationScore: number
}

interface ConflictAnalysis {
  totalConflicts: number
  conflictDetails: Array<{
    codigo: string
    opaName: string
    tramiteName: string
    sameService: boolean
  }>
}

async function analyzeCodeConflicts(): Promise<ConflictAnalysis> {
  console.log('üîç Analizando conflictos de c√≥digos...')

  const { data: conflicts, error } = await supabase
    .from('opas')
    .select(`
      codigo_opa,
      nombre,
      tramites!inner(codigo_unico, nombre)
    `)
    .eq('tramites.codigo_unico', supabase.raw('opas.codigo_opa'))

  if (error) {
    throw new Error(`Error analizando conflictos: ${error.message}`)
  }

  const conflictDetails = (conflicts || []).map(item => ({
    codigo: item.codigo_opa,
    opaName: item.nombre,
    tramiteName: item.tramites[0]?.nombre || '',
    sameService: item.nombre.toLowerCase().includes(item.tramites[0]?.nombre.toLowerCase() || '') ||
                 item.tramites[0]?.nombre.toLowerCase().includes(item.nombre.toLowerCase() || '')
  }))

  return {
    totalConflicts: conflictDetails.length,
    conflictDetails
  }
}

function defineStrategies(): SyncStrategy[] {
  return [
    {
      name: "Estrategia 1: Prefijos por Tipo",
      description: "Agregar prefijos T- para tr√°mites y O- para OPAs en el campo codigo",
      pros: [
        "Soluci√≥n simple y clara",
        "C√≥digos √∫nicos garantizados",
        "F√°cil identificaci√≥n visual del tipo",
        "Preserva c√≥digo original en campo separado"
      ],
      cons: [
        "Requiere actualizar UI para mostrar c√≥digos con prefijos",
        "Cambio en la estructura de c√≥digos existente",
        "Posible confusi√≥n inicial para usuarios"
      ],
      implementation: `
        1. Agregar campo 'codigo_original' a tabla servicios
        2. Actualizar c√≥digos existentes: T-{codigo} para tr√°mites
        3. Insertar OPAs con c√≥digos: O-{codigo_opa}
        4. Actualizar componentes UI para manejar prefijos
      `,
      uiChangesRequired: true,
      riskLevel: 'medium',
      recommendationScore: 8
    },
    {
      name: "Estrategia 2: C√≥digo Compuesto",
      description: "Usar formato {tipo_servicio}-{codigo_original} manteniendo separaci√≥n l√≥gica",
      pros: [
        "C√≥digos autodescriptivos",
        "Mantiene l√≥gica organizacional",
        "F√°cil filtrado por tipo",
        "Escalable para futuros tipos"
      ],
      cons: [
        "C√≥digos m√°s largos",
        "Requiere actualizaci√≥n de UI",
        "Cambio en l√≥gica de b√∫squeda"
      ],
      implementation: `
        1. Formato: 'tramite-{codigo}' y 'opa-{codigo_opa}'
        2. Mantener codigo_original para referencia
        3. Actualizar √≠ndices de b√∫squeda
        4. Modificar componentes de visualizaci√≥n
      `,
      uiChangesRequired: true,
      riskLevel: 'medium',
      recommendationScore: 7
    },
    {
      name: "Estrategia 3: Campo C√≥digo √önico + Original",
      description: "Generar c√≥digos √∫nicos autom√°ticos manteniendo c√≥digo original separado",
      pros: [
        "C√≥digos √∫nicos garantizados",
        "Preserva c√≥digos originales intactos",
        "No afecta l√≥gica organizacional existente",
        "Flexible para futuras expansiones"
      ],
      cons: [
        "Requiere l√≥gica adicional para mostrar c√≥digo apropiado",
        "Dos campos de c√≥digo pueden confundir",
        "Complejidad en b√∫squedas"
      ],
      implementation: `
        1. Campo 'codigo' = UUID o secuencial √∫nico
        2. Campo 'codigo_original' = c√≥digo original (puede duplicarse)
        3. Campo 'codigo_display' = c√≥digo a mostrar en UI
        4. L√≥gica condicional en componentes
      `,
      uiChangesRequired: true,
      riskLevel: 'high',
      recommendationScore: 5
    },
    {
      name: "Estrategia 4: Sufijos Num√©ricos",
      description: "Mantener c√≥digos originales y agregar sufijos para duplicados",
      pros: [
        "M√≠nimo cambio en c√≥digos existentes",
        "Preserva c√≥digos originales mayormente",
        "F√°cil de entender",
        "Cambios m√≠nimos en UI"
      ],
      cons: [
        "Sufijos pueden ser confusos",
        "No es autodescriptivo del tipo",
        "Requiere l√≥gica para asignar sufijos",
        "Puede generar c√≥digos largos"
      ],
      implementation: `
        1. Mantener c√≥digos √∫nicos como est√°n
        2. Duplicados: {codigo}-2, {codigo}-3, etc.
        3. Campo tipo_servicio para diferenciaci√≥n
        4. M√≠nimos cambios en UI
      `,
      uiChangesRequired: false,
      riskLevel: 'low',
      recommendationScore: 6
    },
    {
      name: "Estrategia 5: H√≠brida - Prefijos Solo para Duplicados",
      description: "Mantener c√≥digos √∫nicos sin cambios, prefijos solo para conflictos",
      pros: [
        "M√≠nimo impacto en c√≥digos existentes",
        "Solo afecta c√≥digos duplicados",
        "Preserva la mayor√≠a de c√≥digos originales",
        "Cambios m√≠nimos en UI"
      ],
      cons: [
        "L√≥gica compleja para determinar cu√°ndo usar prefijos",
        "Inconsistencia en formato de c√≥digos",
        "Puede confundir a usuarios"
      ],
      implementation: `
        1. Mantener c√≥digos √∫nicos existentes
        2. Solo duplicados: O-{codigo} para OPAs nuevas
        3. L√≥gica condicional en UI
        4. Campo 'has_prefix' para control
      `,
      uiChangesRequired: true,
      riskLevel: 'medium',
      recommendationScore: 7
    }
  ]
}

async function evaluateStrategies(): Promise<void> {
  console.log('üìä AN√ÅLISIS DE ESTRATEGIAS PARA SINCRONIZACI√ìN COMPLETA')
  console.log('=' .repeat(70))
  console.log('Objetivo: 830 servicios totales (722 OPAs + 108 tr√°mites)\n')

  // Analizar conflictos
  const conflicts = await analyzeCodeConflicts()
  console.log(`üîç Conflictos identificados: ${conflicts.totalConflicts}`)
  
  // Mostrar algunos ejemplos de conflictos
  console.log('\nüìã Ejemplos de conflictos:')
  conflicts.conflictDetails.slice(0, 5).forEach((conflict, index) => {
    const status = conflict.sameService ? '‚úÖ Mismo servicio' : '‚ö†Ô∏è  Servicios diferentes'
    console.log(`${index + 1}. ${conflict.codigo}`)
    console.log(`   OPA: ${conflict.opaName}`)
    console.log(`   Tr√°mite: ${conflict.tramiteName}`)
    console.log(`   ${status}\n`)
  })

  // Evaluar estrategias
  const strategies = defineStrategies()
  
  console.log('üéØ EVALUACI√ìN DE ESTRATEGIAS:\n')
  
  strategies
    .sort((a, b) => b.recommendationScore - a.recommendationScore)
    .forEach((strategy, index) => {
      console.log(`${index + 1}. ${strategy.name}`)
      console.log(`   üìù ${strategy.description}`)
      console.log(`   üéØ Puntuaci√≥n: ${strategy.recommendationScore}/10`)
      console.log(`   ‚ö†Ô∏è  Riesgo: ${strategy.riskLevel.toUpperCase()}`)
      console.log(`   üîß Cambios UI: ${strategy.uiChangesRequired ? 'S√ç' : 'NO'}`)
      
      console.log('   ‚úÖ Pros:')
      strategy.pros.forEach(pro => console.log(`      ‚Ä¢ ${pro}`))
      
      console.log('   ‚ùå Contras:')
      strategy.cons.forEach(con => console.log(`      ‚Ä¢ ${con}`))
      
      console.log(`   üõ†Ô∏è  Implementaci√≥n:${strategy.implementation}`)
      console.log('')
    })

  // Recomendaci√≥n final
  const recommended = strategies.reduce((prev, current) => 
    prev.recommendationScore > current.recommendationScore ? prev : current
  )

  console.log('üèÜ ESTRATEGIA RECOMENDADA:')
  console.log(`${recommended.name}`)
  console.log(`Puntuaci√≥n: ${recommended.recommendationScore}/10`)
  console.log(`Riesgo: ${recommended.riskLevel}`)
  console.log('\nüí° Justificaci√≥n:')
  console.log('- Balance √≥ptimo entre funcionalidad y simplicidad')
  console.log('- C√≥digos √∫nicos garantizados')
  console.log('- Preserva informaci√≥n original')
  console.log('- Cambios controlados en UI')
}

// Ejecutar si se llama directamente
if (require.main === module) {
  evaluateStrategies()
    .then(() => {
      console.log('\n‚úÖ An√°lisis completado')
      process.exit(0)
    })
    .catch(error => {
      console.error('‚ùå Error en an√°lisis:', error)
      process.exit(1)
    })
}

export { evaluateStrategies, analyzeCodeConflicts, defineStrategies }
