/**
 * Script para corregir descripciones gen√©ricas de OPAs
 * Reemplaza "Servicio OPA" con descripciones m√°s espec√≠ficas basadas en el nombre
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

interface OPADescriptionFix {
  id: string
  codigo: string
  nombre: string
  oldDescription: string
  newDescription: string
}

function generateDescriptionFromName(nombre: string): string {
  // Convertir a min√∫sculas para an√°lisis
  const nombreLower = nombre.toLowerCase()
  
  // Patrones espec√≠ficos para generar descripciones
  if (nombreLower.includes('turismo') || nombreLower.includes('turistico')) {
    return `Servicio de atenci√≥n personalizada para consultas y tr√°mites relacionados con ${nombre.toLowerCase()}.`
  }
  
  if (nombreLower.includes('emprendimiento') || nombreLower.includes('emprende')) {
    return `Servicio de apoyo y asesor√≠a para ${nombre.toLowerCase()}, incluyendo orientaci√≥n y acompa√±amiento empresarial.`
  }
  
  if (nombreLower.includes('agricola') || nombreLower.includes('ganadero') || nombreLower.includes('pecuario')) {
    return `Servicio de atenci√≥n y gesti√≥n para ${nombre.toLowerCase()}, con asesor√≠a t√©cnica especializada.`
  }
  
  if (nombreLower.includes('certificacion') || nombreLower.includes('certificado')) {
    return `Servicio para la obtenci√≥n de ${nombre.toLowerCase()}, con revisi√≥n de requisitos y documentaci√≥n.`
  }
  
  if (nombreLower.includes('informacion') || nombreLower.includes('consulta')) {
    return `Servicio de informaci√≥n y orientaci√≥n sobre ${nombre.toLowerCase()}.`
  }
  
  if (nombreLower.includes('capacitacion') || nombreLower.includes('formacion')) {
    return `Servicio de ${nombre.toLowerCase()} dirigido a ciudadanos y empresarios del municipio.`
  }
  
  if (nombreLower.includes('apoyo economico') || nombreLower.includes('credito')) {
    return `Servicio de orientaci√≥n y gesti√≥n para ${nombre.toLowerCase()}, con acompa√±amiento en el proceso.`
  }
  
  if (nombreLower.includes('maltrato') || nombreLower.includes('abandono')) {
    return `Servicio para reportar y gestionar casos de ${nombre.toLowerCase()}, con seguimiento del proceso administrativo.`
  }
  
  if (nombreLower.includes('impuesto')) {
    return `Servicio de informaci√≥n y gesti√≥n relacionado con ${nombre.toLowerCase()}.`
  }
  
  if (nombreLower.includes('adopcion')) {
    return `Servicio municipal de ${nombre.toLowerCase()}, con proceso de evaluaci√≥n y seguimiento.`
  }
  
  // Descripci√≥n gen√©rica mejorada
  return `Servicio de atenci√≥n al ciudadano para ${nombre.toLowerCase()}, con orientaci√≥n especializada y seguimiento del proceso.`
}

async function fixOPADescriptions(dryRun: boolean = true) {
  console.log('üîß Corrigiendo descripciones gen√©ricas de OPAs...')
  console.log(`Modo: ${dryRun ? 'SIMULACI√ìN' : 'APLICAR CAMBIOS'}\n`)

  const fixes: OPADescriptionFix[] = []

  try {
    // Obtener OPAs con descripciones gen√©ricas
    const { data: opasToFix, error } = await supabase
      .from('servicios')
      .select('id, codigo, nombre, descripcion')
      .eq('tipo_servicio', 'opa')
      .eq('descripcion', 'Servicio OPA')

    if (error) {
      throw new Error(`Error consultando OPAs: ${error.message}`)
    }

    console.log(`üìã Encontrados ${opasToFix?.length || 0} registros para corregir\n`)

    if (!opasToFix || opasToFix.length === 0) {
      console.log('‚úÖ No hay descripciones gen√©ricas que corregir')
      return { totalFixed: 0, fixes: [] }
    }

    // Generar nuevas descripciones
    for (const opa of opasToFix) {
      const newDescription = generateDescriptionFromName(opa.nombre)
      
      fixes.push({
        id: opa.id,
        codigo: opa.codigo,
        nombre: opa.nombre,
        oldDescription: opa.descripcion,
        newDescription
      })
    }

    // Mostrar preview de cambios
    console.log('üìù PREVIEW DE CAMBIOS:')
    console.log('=' .repeat(80))
    
    fixes.slice(0, 5).forEach((fix, index) => {
      console.log(`${index + 1}. ${fix.codigo} - ${fix.nombre}`)
      console.log(`   Antes: "${fix.oldDescription}"`)
      console.log(`   Despu√©s: "${fix.newDescription}"`)
      console.log('')
    })

    if (fixes.length > 5) {
      console.log(`   ... y ${fixes.length - 5} m√°s\n`)
    }

    // Aplicar cambios si no es dry run
    if (!dryRun) {
      console.log('üíæ Aplicando cambios...')
      
      let successCount = 0
      let errorCount = 0

      for (const fix of fixes) {
        try {
          const { error: updateError } = await supabase
            .from('servicios')
            .update({ 
              descripcion: fix.newDescription,
              updated_at: new Date().toISOString()
            })
            .eq('id', fix.id)

          if (updateError) {
            console.error(`‚ùå Error actualizando ${fix.codigo}:`, updateError.message)
            errorCount++
          } else {
            successCount++
          }
        } catch (err) {
          console.error(`‚ùå Error actualizando ${fix.codigo}:`, err)
          errorCount++
        }
      }

      console.log(`\nüìä RESULTADOS:`)
      console.log(`‚úÖ Actualizados exitosamente: ${successCount}`)
      console.log(`‚ùå Errores: ${errorCount}`)
      console.log(`üìã Total procesados: ${fixes.length}`)
    } else {
      console.log('‚ÑπÔ∏è  Ejecuta con --apply para aplicar los cambios')
    }

    return {
      totalFixed: dryRun ? 0 : fixes.length,
      fixes
    }

  } catch (error) {
    console.error('‚ùå Error durante la correcci√≥n:', error)
    throw error
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  const args = process.argv.slice(2)
  const applyChanges = args.includes('--apply')
  
  fixOPADescriptions(!applyChanges)
    .then(result => {
      console.log('\n‚úÖ Proceso completado')
      if (result.totalFixed > 0) {
        console.log(`üéâ Se corrigieron ${result.totalFixed} descripciones`)
      }
      process.exit(0)
    })
    .catch(error => {
      console.error('‚ùå Error en el proceso:', error)
      process.exit(1)
    })
}

export { fixOPADescriptions }
